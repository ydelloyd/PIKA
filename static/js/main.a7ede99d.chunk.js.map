{"version":3,"sources":["resources/loading.gif","resources/logo.png","component/AttributePanel/AttributePanel.js","component/GraphPanel/GraphPanel.js","component/MainPage/MainPage.js","component/NavTop/NavTop.js","component/About/About.js","component/Questions/Questions.js","component/People/People.js","component/Team/Team.js","component/ContactPage/ContactPage.js","component/DocumentComponent/DocumentComponent.js","component/DocumentPage/DocumentPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AttributePanel","props","Panel","Collapse","useState","checkedList","setCheckedList","openNotification","placement","message","desc","notification","error","description","className","accordion","Object","keys","attributes","map","category","index","header","key","Group","onChange","e","checkedValues","filter","options","item","colName","includes","concat","value","option","cell_index","span","prettyName","type","onClick","callbackSpin","callbackGeoGraph","length","data","algo","num_cluster","cols","para","headers","body","JSON","stringify","method","fetch","then","res","json","callbackParallelData","parallel_data","callbackPlotingData","values","console","log","GraphPanel","plotType","input","mode","text","msa_name","lon","long","lat","marker","size","color","line","width","name","textposition","title","font","family","titlefont","geo","scope","projection","showrivers","rivercolor","showlakes","lakecolor","showland","landcolor","countrycolor","countrywidth","subunitcolor","height","processScatter","plotingData","layout","dim","forEach","push","range","label","colorscale","dimensions","processPara","style","display","geoGraph","spin","src","require","marginLeft","alt","textAlign","fontSize","fontWeight","MainPage","setSpin","setGeoGraph","setAttributes","setPlotingData","parallelData","setParallelData","count","useEffect","a","result","resultFromWebCall","buildAttributesDictionary","fetchData","inputArray","ret","spinVal","plotingDataVal","geoGraphVal","NavTop","ghost","avatar","shape","subTitle","extra","href","Title","Typography","Paragraph","Content","Layout","About","justify","flexDirection","padding","Option","Select","Questions","visible","setVisible","Form","useForm","form","level","onOk","validateFields","resetFields","open","icon","SmileOutlined","catch","info","onCancel","okText","cancelText","labelCol","wrapperCol","Item","rules","required","placeholder","TextArea","Meta","Card","People","window","location","person","Link","hoverable","cover","process","Photo","Name","Team","members","ContactPanel","DocumentComponent","document","Grid","to","documentLocation","target","download","DownloadOutlined","DocumentPage","doc","App","exact","path","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7ede99d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.5dd02025.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.1519d9e1.png\";","import React, {useState} from 'react'\r\nimport { Checkbox, Button, Collapse, Row, Col, notification } from 'antd';\r\nimport './AttributePanel.scss';\r\n\r\nexport default function AttributePanel (props){\r\n    const { Panel } = Collapse;\r\n    const [checkedList, setCheckedList] = useState([]);\r\n\r\n    const handleReset = () => {\r\n        props.callbackSpin('none');\r\n        props.callbackGeoGraph('none');\r\n        setCheckedList([]);\r\n    };\r\n\r\n    const handleAnalyze = () => {\r\n        if (checkedList.length !== 0) {\r\n            const url = 'https://cors-anywhere.herokuapp.com/https://team-rocket-svc.herokuapp.com/process_attributes';\r\n            const data = {\r\n                algo: 'KMeans',\r\n                num_cluster: 20,\r\n                cols: checkedList\r\n            };\r\n            const para = {\r\n                headers: {'content-type': 'application/json; charset=UTF-8'},\r\n                body: JSON.stringify(data),\r\n                method: 'POST'\r\n            };\r\n            props.callbackSpin('block');\r\n            props.callbackGeoGraph('none');\r\n            fetch(url, para).then(res => res.json())\r\n            .then((data) => {\r\n                props.callbackParallelData(data.parallel_data);\r\n                props.callbackPlotingData(data.values);\r\n                props.callbackSpin('none');\r\n                props.callbackGeoGraph('block');\r\n            },(error) => {\r\n                console.log(error);\r\n                openNotification('topRight', `Error`, `There was an error processing your data. Please try again`);\r\n                props.callbackSpin('none');\r\n                props.callbackGeoGraph('none');\r\n            });\r\n        } else\r\n            openNotification('topRight', `Analyze Failed`, 'Please make sure select at least one attribute before starting to analyze.');\r\n    };\r\n\r\n    const onChange = (category, checkedValues) => {\r\n        setCheckedList(checkedList.filter( options => !props.attributes[category].map(item => item.colName).includes(options)).concat(checkedValues));\r\n    };\r\n\r\n    const openNotification = (placement, message, desc) => {\r\n        notification.error({\r\n            message: message,\r\n            description: desc,\r\n            placement,\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <div className='attributes-wrapper'>\r\n            <div className='attributes'>\r\n\r\n                <Collapse accordion>\r\n                    {Object.keys(props.attributes).map((category, index) =>\r\n                        <Panel header={category} key={index}>\r\n                            <Checkbox.Group onChange={(e) => onChange(category, e)} value={checkedList}>\r\n                                <Row>\r\n                                    {props.attributes[category].map((option, cell_index) =>\r\n                                        <Col span={6} key={cell_index}>\r\n                                            <Checkbox value={option.colName} key={cell_index}>{option.prettyName}</Checkbox>\r\n                                        </Col>\r\n                                    )}\r\n                                </Row>\r\n                            </Checkbox.Group>\r\n                        </Panel>\r\n                    )}\r\n                </Collapse>\r\n                <br/>\r\n                <br/>\r\n\r\n                <Button type='primary' onClick={handleReset}>Reset</Button>\r\n                <Button type='primary' onClick={handleAnalyze}>Analyze</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport './GraphPanel.scss'\r\nimport Plot from 'react-plotly.js';\r\n\r\nexport default function GraphPanel(props){\r\n    \r\n    const processScatter = (input) => {\r\n        let data = [];\r\n        if(input !== []){\r\n            data = [{\r\n                type: 'scattergeo',\r\n                mode: 'markers',\r\n                text: input.msa_name,\r\n                lon: input.long,\r\n                lat: input.lat,\r\n                marker: {\r\n                    size: 7,\r\n                    color: input.color,\r\n                    line: {\r\n                        width: 1\r\n                    }\r\n                },\r\n                name: 'US cities',\r\n                textposition: input.textposition,\r\n            }];\r\n        } \r\n        \r\n        let layout = {\r\n            title: 'US cities',\r\n            font: {\r\n                family: 'Droid Serif, serif',\r\n                size: 6\r\n            },\r\n            titlefont: {\r\n                size: 16\r\n            },\r\n            geo: {\r\n                scope: 'usa',\r\n                projection: {\r\n                    type: 'albers usa'\r\n                },\r\n                showrivers: true,\r\n                rivercolor: '#fff',\r\n                showlakes: true,\r\n                lakecolor: '#fff',\r\n                showland: true,\r\n                landcolor: '#EAEAAE',\r\n                countrycolor: '#d3d3d3',\r\n                countrywidth: 1.5,\r\n                subunitcolor: '#d3d3d3'\r\n            },\r\n            width: 1600,\r\n            height: 800\r\n        };\r\n        \r\n        return {'data' : data, 'layout' : layout}\r\n    }\r\n\r\n    const processPara = (input) => {\r\n        let data = [];\r\n        let layout = {};\r\n        let dim = [];\r\n        Object.keys(input).forEach((key) => {\r\n            if(key !== 'color' && key !== 'colorscale'){\r\n                dim.push({\r\n                    range: [0, 1],\r\n                    label: key,\r\n                    values: input[key]\r\n                });\r\n            }\r\n        });\r\n        if(input !== []){\r\n            data = [{\r\n                type: 'parcoords',\r\n                line: {\r\n                    color: input.color,\r\n                    colorscale: input.colorscale\r\n                },\r\n                dimensions: dim\r\n            }];\r\n            layout = {\r\n                width: 1600,\r\n                height: 800\r\n            };\r\n        }\r\n        return {'data': data, 'layout': layout}\r\n    }\r\n\r\n    let res = {'data': [], 'layout': {}}\r\n    if(props.plotType === 'map') res = processScatter(props.plotingData);\r\n    if(props.plotType === 'para') res = processPara(props.plotingData);\r\n\r\n    return (\r\n        <div className='graph-wrapper'>\r\n            <div className='graph' style={{display: props.geoGraph}}>\r\n                <Plot\r\n                    data={res.data}\r\n                    layout={res.layout}\r\n                />\r\n            </div>\r\n            <div className='graph' style={{display: props.spin}}>\r\n                <img src={require('./../../resources/loading.gif')} style={{width: '500px', height: '500px', marginLeft: '500px'}} alt='loading...'/>\r\n                <p style={{textAlign: 'center', fontSize: '20px', fontWeight: 'bold'}}>Processing Data, please wait...</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {useEffect, useState} from 'react'\r\nimport AttributePanel from './../AttributePanel/AttributePanel'\r\nimport GraphPanel from './../GraphPanel/GraphPanel'\r\n\r\nexport default function MainPage (){\r\n    const [spin, setSpin] = useState('none');\r\n    const [geoGraph, setGeoGraph] = useState('none');\r\n    const [attributes, setAttributes] = useState([]);\r\n    const [plotingData, setPlotingData] = useState([]);\r\n    const [parallelData, setParallelData] = useState([]);\r\n\r\n    const [count, ] = useState(0);\r\n    console.log('main');\r\n    useEffect (  () => {\r\n       const fetchData = async () => {\r\n            const result = await fetch('https://cors-anywhere.herokuapp.com/https://team-rocket-svc.herokuapp.com/get_attributes_mapping')\r\n                .then(res => res.json());\r\n\r\n           const resultFromWebCall = buildAttributesDictionary(result.attributes);\r\n           setAttributes(resultFromWebCall);\r\n        };\r\n        fetchData().then(()=>{});\r\n\r\n    }, [count]);\r\n\r\n    const callbackSpin = (spinVal) => {\r\n        setSpin(spinVal);\r\n    };\r\n\r\n    const callbackGeoGraph = (geoGraphVal) => {\r\n        setGeoGraph(geoGraphVal);\r\n    };\r\n\r\n    const callbackPlotingData = (plotingDataVal) => {\r\n        setPlotingData(plotingDataVal);\r\n    };\r\n\r\n    const callbackParallelData = (plotingDataVal) => {\r\n        setParallelData(plotingDataVal);\r\n    };\r\n\r\n    const buildAttributesDictionary = (inputArray) => {\r\n        let ret = {};\r\n        inputArray.forEach((input) => {\r\n            if(!ret[input.category])\r\n                ret[input.category] = [{prettyName: input.prettyName, colName: input.colName}];\r\n            else\r\n                ret[input.category].push({prettyName: input.prettyName, colName: input.colName});\r\n        });\r\n        return ret;\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <AttributePanel callbackSpin={callbackSpin} callbackPlotingData={callbackPlotingData} callbackParallelData={callbackParallelData} callbackGeoGraph={callbackGeoGraph} attributes={attributes}/>\r\n        <GraphPanel spin={spin} geoGraph={geoGraph} plotingData={plotingData} plotType={'map'} />\r\n        <GraphPanel spin={spin} geoGraph={geoGraph} plotingData={parallelData} plotType={'para'} />\r\n      </div>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport { PageHeader } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport './NavTop.scss'\r\n\r\nexport default function NavTop (){\r\n\r\n  return (\r\n      <div className='site-page-header-ghost-wrapper'>\r\n          <PageHeader\r\n            ghost={false}\r\n            avatar={{ size: '64', shape: 'square', src: require('./../../resources/logo.png')}}\r\n            title='PIKA'\r\n            subTitle='Program for Imagining a Klustering Algorithm'\r\n            extra={[\r\n              <a key='1' className='pika-header-anchor' href='/'>Cluster</a>,\r\n              <a key='2' className='pika-header-anchor' href='/document' >Documents</a>,\r\n              <a key='3' className='pika-header-anchor' href='/contacts' >Contacts</a>\r\n            ]}\r\n          >\r\n          </PageHeader>\r\n        </div>\r\n  )\r\n}","import React from 'react'\r\nimport { Row, Col, Avatar, Typography, Layout } from 'antd';\r\nimport './About.scss'\r\nconst { Title, Paragraph } = Typography;\r\nconst { Content} = Layout;\r\n\r\nexport default function About(){\r\n    const about = 'PIKA, Program for Imagining a Klustering Algorithm, is designed to be an application where a user can visualize, on a map, the clusters of various major '+\r\n    'geographical areas and have the unsupervised learning model group locations. Since urban areas can be successfully classified through different structural dimensions '+\r\n    ', performing the unsupervised version - clustering, should also be a feasible task. We will perform clustering so that a person can identify areas he/she is more '+\r\n    'familiar with. In addition, PIKA will also allow for users to customize what variables and factors they are interested in having considered in the algorithm. All in '+\r\n    'all, we want to define similar cities without ranking and just grouping them together based on a customized attribute pool. We can do this because there exist ' +\r\n    'similarities that describe such behavior in that… despite the great geographical distances, the rents and vacancies of some east and west coast cities tend to move together.';\r\n    \r\n    return (\r\n        <div className='content-wrapper'>\r\n            <Content className='site-layout-background'>\r\n                <Row justify='center' style={{textAlign: 'center'}}>\r\n                    <Col span={8} />\r\n                    <Col span={8}>\r\n                        <Title style={{textAlign: 'center'}}>Team Rocket #150</Title>\r\n                    </Col>\r\n                    <Col span={8} />\r\n                </Row>\r\n                <br/>\r\n                <div style={{ display: 'flex', flexDirection: 'row'}}>\r\n                    <Avatar shape='square' size={100} src='https://vignette.wikia.nocookie.net/universeconquest/images/6/67/Team_Rocket_Logo.jpg/revision/latest?cb=20190206180338'/>\r\n                    <Paragraph style={{ width:'100%', padding: '0 0 0 20px'}}>\r\n                        {about}\r\n                    </Paragraph>\r\n                </div>\r\n            </Content>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {useState} from 'react'\r\nimport {Row, Typography, Form, Input, Button, Select, notification, Modal, Col} from 'antd';\r\nimport './Questions.scss';\r\nimport { SmileOutlined } from '@ant-design/icons';\r\nconst { Title } = Typography;\r\nconst { Option } = Select;\r\n\r\n\r\nexport default function Questions(){\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const [form] = Form.useForm();\r\n\r\n    const showModal = () => {\r\n        setVisible(true);\r\n    };\r\n\r\n    const hideModal = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        // HTTP Post Call to send email\r\n        form.validateFields()\r\n            .then(values => {\r\n                form.resetFields();\r\n                notification.open({\r\n                    message: 'Sent',\r\n                    description:\r\n                        `Message Received ${values.name}! Thanks for contacting us!`,\r\n                    icon: <SmileOutlined style={{ color: '#108ee9' }} />,\r\n                });\r\n            })\r\n            .catch(info => {\r\n                console.log('Validate Failed:', info);\r\n            });\r\n    };\r\n\r\n    const layout = {\r\n        labelCol: { span: 6 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    return (\r\n        <div className='question-wrapper'>\r\n            <div className='question'>\r\n                <Row>\r\n                    <Col span={8} />\r\n                    <Col span={8}>\r\n                        <Title level={2} style={{textAlign: 'center'}}>Questions</Title>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={8} />\r\n                    <Col span={8} style={{textAlign: 'center'}}>\r\n                        <Button type='primary' onClick={showModal}>\r\n                            Contact Us\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            <Modal\r\n                title='Contact Us'\r\n                visible={visible}\r\n                onOk={onSubmit}\r\n                onCancel={hideModal}\r\n                okText='Submit'\r\n                cancelText='Cancel'\r\n            >\r\n                <Form  {...layout} form={form}>\r\n                    <Form.Item name='name' label='Name' rules={[{ required: true, message: 'Please enter your name!' }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name='email' label='Email' rules={[{ type: 'email',message: 'Please enter a valid E-mail!' }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name='IssueType'\r\n                        label='Select'\r\n                        rules={[{ required: true, message: 'Please select a contact reason' }]}\r\n                    >\r\n                        <Select placeholder='Please select a contact reason'>\r\n                        <Option value='bug'>Report a Bug</Option>\r\n                        <Option value='feature'>Request a Feature</Option>\r\n                        <Option value='hello'>Saying Hello</Option>\r\n                        <Option value='other'>Other</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item name={'body'} label='Description'>\r\n                        <Input.TextArea />\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {  Card  } from 'antd';\r\nconst { Meta } = Card;\r\n\r\nexport default function People(props){\r\n\r\n    return (\r\n        <div onClick={()=>{window.location.href = props.person.Link}} style={{padding: '0 0 0 15px'}}>\r\n            <Card\r\n            hoverable\r\n            style={{ width: 240, height: 300}}\r\n            cover={<img className='people-profile-pic' alt={props.person.name} src={process.env.PUBLIC_URL + props.person.Photo} style={{ width: 240, height: 240}}/>}\r\n            >\r\n            <Meta title={props.person.Name} style={{textAlign: 'center'}}/>\r\n            </Card>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Row, Col, Typography } from 'antd';\r\nimport People from '../People/People';\r\nimport './Team.scss';\r\nconst { Title } = Typography;\r\n\r\nexport default function Team(props){\r\n    let members = [\r\n        {\r\n            Name : 'York Delloyd',\r\n            Photo : '/york.jpg',\r\n            Link : 'https://www.linkedin.com/in/york-delloyd-310342123/'\r\n        },\r\n        {\r\n            Name : 'Bowen Yang',\r\n            Photo : '/bowen.jpg',\r\n            Link : 'https://www.linkedin.com/in/byang9/'\r\n        },\r\n        {\r\n            Name : 'Philip Edwards',\r\n            Photo : '/phil.png',\r\n            Link : 'https://www.linkedin.com/in/philip-edwards-99394bb6/'\r\n        },\r\n        {\r\n            Name : 'Hongji Wang',\r\n            Photo : '/hongji.jpg',\r\n            Link : 'https://www.linkedin.com/in/hongji-wang-4a25b6b6/'\r\n        },\r\n        {\r\n            Name : 'Edward Tan',\r\n            Photo : '/edward.jpg',\r\n            Link : 'https://www.linkedin.com/in/qqtan/'\r\n        }\r\n    ]\r\n    return (\r\n        <div className='team-wrapper'>\r\n            <div className='team'>\r\n               <Row>\r\n                   <Col span={8} />\r\n                   <Col span={8} style={{textAlign: 'center'}}>\r\n                        <Title level={2}>Team Rocket Team</Title>\r\n                   </Col>\r\n               </Row>\r\n               <Row>\r\n                   <Col span={4}>\r\n                        <People person={members[0]}/>\r\n                   </Col>\r\n                   <Col span={4}>\r\n                        <People person={members[1]}/>\r\n                   </Col>\r\n                   <Col span={4}>\r\n                       <People person={members[2]}/>\r\n                   </Col>\r\n                   <Col span={4}>\r\n                       <People person={members[3]}/>\r\n                   </Col>\r\n                   <Col span={4}>\r\n                       <People person={members[4]}/>\r\n                   </Col>\r\n                </Row>\r\n                <br/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport About from '../About/About'\r\nimport Questions from '../Questions/Questions'\r\nimport Team from '../Team/Team'\r\n\r\nexport default function ContactPanel (){\r\n\r\n\r\n    return (\r\n      <div>\r\n        <About/>\r\n        <Questions/>\r\n        <Team/>        \r\n      </div>\r\n\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Card, Button } from 'antd';\r\nimport { DownloadOutlined } from '@ant-design/icons'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function DocumentComponent(props){\r\n\r\n    const textStyle = {\r\n        width: '75%',\r\n        textAlign: 'center',\r\n    };\r\n\r\n    const buttonStyle = {\r\n        width: '25%',\r\n        textAlign: 'center',\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Card title={props.document.title}>\r\n                <Card.Grid style={textStyle}>{props.document.desc}</Card.Grid>\r\n                <Card.Grid style={buttonStyle}>\r\n                    <Link to={props.document.documentLocation} target=\"_blank\" download>\r\n                        <Button type=\"primary\" shape=\"round\" icon={<DownloadOutlined />}>Download</Button>\r\n                    </Link>\r\n                </Card.Grid>\r\n            </Card>\r\n      </div>\r\n    )\r\n\r\n}","import React from 'react'\r\nimport './DocumenttPage.scss'\r\nimport DocumentComponent from '../DocumentComponent/DocumentComponent'\r\n\r\nexport default function DocumentPage (){\r\n    const documents = [\r\n        {title: 'Proposal Document', desc: 'Our proposal document that answers the Heilmeier Questions presenting our project idea.', documentLocation: '/documents/team150proposal.pdf', type:'pdf'},\r\n        {title: 'Proposal Slides', desc: 'Porposal side deck to accompany our proposal video.', documentLocation: '/documents/team150slides.pdf', type:'pdf'},\r\n        {title: 'Proposal Video', desc: 'MP4 Video of our proposal where we go over our project idea and relevant facts in video form', documentLocation: '/documents/team150proposal.mp4', type:'mp4'},\r\n        {title: 'Progress Report', desc: 'Midterm report that covers all the work done until that point along with updated infromation', documentLocation: '/documents/team150progress.pdf', type:'pdf'}\r\n    ]\r\n\r\n    return (\r\n      <div className='document-content-wrapper'>\r\n          <div className='document-content'>\r\n              {documents.map((doc) => {\r\n                  return <DocumentComponent document = {doc}/>\r\n              })}\r\n          </div>\r\n      </div>\r\n\r\n  )\r\n}","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\nimport './App.css';\r\nimport MainPage from './component/MainPage/MainPage';\r\nimport NavTop from './component/NavTop/NavTop'\r\nimport ContactPage from './component/ContactPage/ContactPage';\r\nimport DocumentPage from './component/DocumentPage/DocumentPage';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n      <BrowserRouter>\r\n          <div className='PIKA'>\r\n              <NavTop/>\r\n              <Switch>\r\n                  <Route exact path='/PIKA'>\r\n                     <MainPage />\r\n                  </Route>\r\n                  <Route exact path='/document'>\r\n                      <DocumentPage/>\r\n                  </Route>\r\n                  <Route exact path='/contacts'>\r\n                      <ContactPage />\r\n                  </Route>\r\n              </Switch>\r\n          </div>\r\n      </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}